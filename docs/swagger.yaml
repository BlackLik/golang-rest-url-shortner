basePath: /
definitions:
  jwt.AccessToken:
    properties:
      access:
        type: string
    type: object
  jwt.CheckTokenJSON:
    properties:
      token:
        type: string
    type: object
  jwt.RefreshAndAccessTokens:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  jwt.UserJSON:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  schema.Response:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  urls.CreateURLBody:
    properties:
      original_url:
        type: string
    type: object
  urls.ShortURLBody:
    properties:
      original_url:
        type: string
    type: object
  urls.URLResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      original_url:
        type: string
      short_url:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: info@mangi.org
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: MIT License
    url: https://opensource.org/license/mit/
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /api/jwt/check:
    post:
      consumes:
      - application/json
      description: Checks the validity of a token
      parameters:
      - description: Token object
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/jwt.CheckTokenJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Check token
      tags:
      - JWT
  /api/jwt/delete:
    delete:
      consumes:
      - application/json
      description: Deletes a user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Delete user
      tags:
      - JWT
  /api/jwt/login:
    post:
      consumes:
      - application/json
      description: Logs in a user
      parameters:
      - description: User object
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/jwt.UserJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.RefreshAndAccessTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.Response'
      summary: User login
      tags:
      - JWT
  /api/jwt/logout:
    get:
      consumes:
      - application/json
      description: Logs out a user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.RefreshAndAccessTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.Response'
      summary: User logout
      tags:
      - JWT
  /api/jwt/refresh:
    get:
      consumes:
      - application/json
      description: Refreshes the JWT token using the refresh token
      parameters:
      - description: Bearer {refresh_token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.AccessToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Refresh JWT token
      tags:
      - JWT
  /api/jwt/register:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User object
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/jwt.UserJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.RefreshAndAccessTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Register user
      tags:
      - JWT
  /api/urls/:
    post:
      consumes:
      - application/json
      description: Создает URL с предоставленным исходным URL.
      parameters:
      - description: Тело запроса
        in: body
        name: c
        required: true
        schema:
          $ref: '#/definitions/urls.CreateURLBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/urls.URLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Создать URL
      tags:
      - Параметры URL
  /api/urls/{shorturl}:
    delete:
      consumes:
      - application/json
      description: Удалить URL с предоставленным коротким URL.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Короткий URL
        in: path
        name: shorturl
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/urls.URLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Удалить URL
      tags:
      - Параметры URL
    get:
      consumes:
      - application/json
      description: Обрабатывает HTTP-запрос для получения параметров URL.
      parameters:
      - description: Короткий URL
        in: path
        name: shorturl
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/urls.URLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Получить параметры URL
      tags:
      - Параметры URL
    patch:
      consumes:
      - application/json
      description: Обновить URL с предоставленным коротким и существующим URL.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Короткий URL
        in: path
        name: shorturl
        required: true
        type: string
      - description: Original URL
        in: body
        name: bodyJson
        required: true
        schema:
          $ref: '#/definitions/urls.ShortURLBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/urls.URLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.Response'
      summary: Обновить URL
      tags:
      - Параметры URL
swagger: "2.0"
